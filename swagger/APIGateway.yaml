swagger: '2.0'  
info:  
  version: '2016-10-06T15:52:14Z'
  title: SavegameAPI
schemes:  
  - https
paths:

  /users/{userId}:

    get:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          required: true 
          type: string
        - name: authToken
          in: header
          required: true
          type: string
      responses:
        '200':
          description: 200 response
        '403':
          description: 403 response
        '404':
          description: 404 response
        '500':
          description: 500 response
      x-amazon-apigateway-integration:
        responses:
          user data not found:
            statusCode: '404'
          default:
            statusCode: '200'
          backend error:
            statusCode: '500'
          auth error:
            statusCode: '403'
        passthroughBehavior: when_no_templates
        uri: arn:aws:apigateway:_AWS_REGION_:lambda:path/2015-03-31/functions/_LAMBDA_FUNCTION_ARN_/invocations
        httpMethod: POST
        requestTemplates:
          application/json: |
            {
              "operation": "load",
              "params": {
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end

                #end
              },
              "headers": {
                #foreach($header in $input.params().header.keySet())
                "$header": "$util.escapeJavaScript($input.params().header.get($header))" #if($foreach.hasNext),#end

                #end
              }
            }
        type: aws

    post:
      description: updates a users savegame data
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          required: true 
          type: string
        - name: authToken
          in: header
          required: true
          type: string  

      responses:
        '200':
          description: 200 response
        '403':
          description: 403 response
        '404':
          description: 404 response
        '500':
          description: 500 response
      x-amazon-apigateway-integration:
        responses:
          user data not found:
            statusCode: '404'
          default:
            statusCode: '200'
          backend error:
            statusCode: '500'
          auth error:
            statusCode: '403'
        passthroughBehavior: when_no_templates
        uri: arn:aws:apigateway:_AWS_REGION_:lambda:path/2015-03-31/functions/_LAMBDA_FUNCTION_ARN_/invocations     
        httpMethod: POST
        requestTemplates:
          application/json: |
            {
              "operation": "save",
              "params": {
                #foreach($param in $input.params().path.keySet())
                "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                #end
              },
              "headers": {
                #foreach($header in $input.params().header.keySet())
                "$header": "$util.escapeJavaScript($input.params().header.get($header))" #if($foreach.hasNext),#end

                #end
              },
              "body" : $input.json('$')
            }
        requestParameters: 
          integration.request.path.userId: method.request.path.userId        
        type: aws                            

  /register:

    post:
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 200 response
        '500':
          description: 500 response
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
          backend error:
            statusCode: '500'
        passthroughBehavior: when_no_templates
        uri: arn:aws:apigateway:_AWS_REGION_:lambda:path/2015-03-31/functions/_LAMBDA_FUNCTION_ARN_/invocations
        httpMethod: POST
        requestTemplates:
          application/json: |
            {
                "operation": "register",
                "body" : $input.json('$')
            }
        type: aws
definitions:  
  Empty:
    type: "object"
    title: "Empty Schema"
